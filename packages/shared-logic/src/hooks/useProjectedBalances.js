import { useMemo } from 'react';
import { toDateInputString } from '../utils/date';

const useProjectedBalances = (accounts, transactions, selectedAccountId = 'all') => {
  return useMemo(() => {
    const accountsToProject =
      selectedAccountId === 'all'
        ? accounts
        : accounts.filter((acc) => acc.id === selectedAccountId);

    if (!accountsToProject || accountsToProject.length === 0) return [];

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const endDate = new Date(today);
    endDate.setDate(today.getDate() + 60);

    // --- FIX: REMOVED RECURRING INSTANCE GENERATION ---
    // This hook now expects the `transactions` prop to be a complete list of all transaction
    // instances (both one-time and recurring), which is generated by `useTransactionInstances`.
    const allInstances = transactions;

    const projectionsByAccount = accountsToProject.map(account => {
      // The logic to calculate balances from the list of instances remains the same.
      // It correctly separates past and future instances to determine the starting balance
      // and then projects forward.
      let startingBalance = account.startingBalance;
      const pastInstances = allInstances.filter(
        (inst) => inst.accountId === account.id && new Date(inst.date) < today
      );
      startingBalance += pastInstances.reduce((sum, inst) => sum + inst.amount, 0);

      const futureInstancesByDate = new Map();
      allInstances.forEach((inst) => {
        const instDate = new Date(inst.date);
        if (inst.accountId === account.id && instDate >= today && instDate <= endDate) {
          const dateKey = toDateInputString(instDate);
          if (!futureInstancesByDate.has(dateKey)) {
            futureInstancesByDate.set(dateKey, []);
          }
          futureInstancesByDate.get(dateKey).push(inst);
        }
      });
      
      const accountProjections = [];
      let currentBalance = startingBalance;
      for (let i = 0; i < 61; i++) {
        const date = new Date(today);
        date.setDate(today.getDate() + i);
        const dateKey = toDateInputString(date);

        const transactionsToday = futureInstancesByDate.get(dateKey) || [];
        const dailyNet = transactionsToday.reduce((sum, t) => sum + t.amount, 0);
        currentBalance += dailyNet;

        accountProjections.push({
          date,
          balance: currentBalance,
          transactions: transactionsToday,
        });
      }
      
      return { accountId: account.id, projections: accountProjections };
    });

    return projectionsByAccount;

  }, [accounts, transactions, selectedAccountId]);
};

export default useProjectedBalances;